const translations={idle_browser:"Lorem Ipsum Dolor Sit Amet"};const resetIdleStatusListeners=["load","mousemove","mousedown","touchstart","click","keypress"];describe("IdleBrowserCapture",(()=>{beforeEach((()=>{jest.resetModules();jest.resetAllMocks();console.error=jest.fn();chrome.extension.onMessage=jest.fn();chrome.extension.onMessage.addListener=jest.fn()}));describe("init",(()=>{it("will not initialize if Alert class instance is not provided",(()=>{globalThis.hlAlert=null;require("../../modules/idle_browser_capture");jest.spyOn(hlIdleBrowserCapture,"_setupChromeEventListeners").mockImplementation((()=>"Setting up Chrome event listeners"));hlIdleBrowserCapture.init({translations:translations});expect(console.error).toBeCalled();expect(hlIdleBrowserCapture._translations).toBeFalsy();expect(hlIdleBrowserCapture._setupChromeEventListeners).not.toBeCalled()}));it("will not initialize if translations are not provided",(()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");jest.spyOn(hlIdleBrowserCapture,"_setupChromeEventListeners").mockImplementation((()=>"Setting up Chrome event listeners"));hlIdleBrowserCapture.init({translations:null});expect(console.error).toBeCalled();expect(hlIdleBrowserCapture._translations).toBeFalsy();expect(hlIdleBrowserCapture._setupChromeEventListeners).not.toBeCalled()}));it("will initialize if Alert class instance and translations are provided.",(()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");jest.spyOn(hlIdleBrowserCapture,"_setupChromeEventListeners").mockImplementation((()=>"Setting up Chrome event listeners"));hlIdleBrowserCapture.init({translations:translations});expect(hlIdleBrowserCapture._translations).toBe(translations);expect(hlIdleBrowserCapture._setupChromeEventListeners).toBeCalled()}))}));describe("_startIdleBrowserCapture",(()=>{beforeEach((()=>{window.addEventListener=jest.fn();require("../../modules/alert");require("../../modules/idle_browser_capture");hlIdleBrowserCapture.init({translations:translations})}));it("will add event listeners for all events listed in _resetIdleStatusListeners",(()=>{jest.spyOn(hlIdleBrowserCapture,"_resetIdleStatus").mockImplementation((memoIndex=>memoIndex));hlIdleBrowserCapture._startIdleBrowserCapture();for(let listener of resetIdleStatusListeners)expect(window.addEventListener).toHaveBeenCalledWith(listener,hlIdleBrowserCapture._resetIdleStatus(`resetIdleStatusEvent-${listener}`))}));it("will establish an idle status interval and trigger _trackIdleSeconds after each second",(()=>{const resetIdleStatusDelay=1e3;jest.spyOn(hlIdleBrowserCapture,"_resetIdleStatus").mockImplementation((()=>"Resetting idle status"));jest.spyOn(hlIdleBrowserCapture,"_trackIdleSeconds").mockImplementation((()=>"Tracking Idle Seconds"));jest.useFakeTimers();jest.spyOn(global,"setInterval");hlIdleBrowserCapture._startIdleBrowserCapture();expect(hlIdleBrowserCapture._idleStatusInterval).toBeTruthy();expect(global.setInterval).toHaveBeenCalledWith(hlIdleBrowserCapture._trackIdleSeconds,resetIdleStatusDelay);expect(hlIdleBrowserCapture._trackIdleSeconds).not.toHaveBeenCalled();jest.advanceTimersByTime(1e3);expect(hlIdleBrowserCapture._trackIdleSeconds).toHaveBeenCalledTimes(1);jest.advanceTimersByTime(1e3);expect(hlIdleBrowserCapture._trackIdleSeconds).toHaveBeenCalledTimes(2);jest.advanceTimersByTime(1e3);expect(hlIdleBrowserCapture._trackIdleSeconds).toHaveBeenCalledTimes(3)}))}));describe("_trackIdleSeconds",(()=>{beforeEach((()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");hlIdleBrowserCapture.init({translations:translations});jest.spyOn(hlAlert,"showAlert").mockImplementation((()=>"Showing Alert"))}));it("will increment _currentlyIdleSeconds by a value of one",(()=>{hlIdleBrowserCapture._currentlyIdleSeconds=0;hlIdleBrowserCapture._trackIdleSeconds();expect(hlIdleBrowserCapture._currentlyIdleSeconds).toBe(1);hlIdleBrowserCapture._trackIdleSeconds();expect(hlIdleBrowserCapture._currentlyIdleSeconds).toBe(2);hlIdleBrowserCapture._trackIdleSeconds();expect(hlIdleBrowserCapture._currentlyIdleSeconds).toBe(3)}));it("will send an alert to the user if _currentlyIdleSeconds is equal to _maxIdleSeconds",(()=>{hlIdleBrowserCapture._currentlyIdleSeconds=2;hlIdleBrowserCapture._trackIdleSeconds();expect(hlIdleBrowserCapture._currentlyIdleSeconds).toBe(3);expect(hlAlert.showAlert).toHaveBeenCalledWith("high",hlIdleBrowserCapture._translations.idle_browser,null,{timeout:null})}))}));describe("_resetIdleStatus",(()=>{beforeEach((()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");hlIdleBrowserCapture.init({translations:translations});jest.spyOn(hlIdleBrowserCapture,"_handleResetIdleStatus").mockImplementation((()=>"handling resetting idle status"))}));it("will create an anonymous function and memoize the value within _eventHandlersMemo if the memo key does not exist",(()=>{const type="type";const memoIndex=`memoIndex-${type}`;expect(hlIdleBrowserCapture._eventHandlersMemo[memoIndex]).toBeUndefined();const resetFunction=hlIdleBrowserCapture._resetIdleStatus(memoIndex);expect(hlIdleBrowserCapture._eventHandlersMemo[memoIndex]).not.toBeUndefined();expect(resetFunction).toEqual(expect.any(Function))}))}));describe("_handleResetIdleStatus",(()=>{beforeEach((()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");jest.spyOn(hlIdleBrowserCapture,"_resetIdleStatus").mockImplementation((memoIndex=>memoIndex));jest.spyOn(global,"clearTimeout");chrome.runtime.sendMessage=jest.fn();window.removeEventListener=jest.fn();hlIdleBrowserCapture._currentlyIdleSeconds=10}));it("will not reset idle status if the document currently does not have focus",(()=>{const memoIndex=`memoIndex-type`;document.hasFocus=jest.fn((()=>false));hlIdleBrowserCapture._handleResetIdleStatus(memoIndex);expect(global.clearTimeout).not.toBeCalled();expect(hlIdleBrowserCapture._currentlyIdleSeconds).not.toEqual(0);expect(chrome.runtime.sendMessage).not.toBeCalled();expect(window.removeEventListener).not.toBeCalled()}));it("will reset idle status for the user and send a stop_idle_browser_capture message",(()=>{const memoIndex=`memoIndex-type`;document.hasFocus=jest.fn((()=>true));hlIdleBrowserCapture._handleResetIdleStatus(memoIndex);expect(global.clearTimeout).toBeCalled();expect(hlIdleBrowserCapture._currentlyIdleSeconds).toEqual(0);expect(chrome.runtime.sendMessage).toBeCalledWith({message:"stop_idle_browser_capture",type:"browser_guard"})}));it("will remove all idle status listeners from the window",(()=>{const memoIndex=`memoIndex-type`;document.hasFocus=jest.fn((()=>true));hlIdleBrowserCapture._handleResetIdleStatus(memoIndex);for(let listener of resetIdleStatusListeners)expect(window.removeEventListener).toHaveBeenCalledWith(listener,hlIdleBrowserCapture._resetIdleStatus(`resetIdleStatusEvent-${listener}`))}))}));describe("_setupChromeEventListeners",(()=>{beforeEach((()=>{require("../../modules/alert");require("../../modules/idle_browser_capture");chrome.extension.onMessage.addListener=jest.fn()}));it("will setup chrome on message listener",(()=>{hlIdleBrowserCapture._setupChromeEventListeners();expect(chrome.extension.onMessage.addListener).toBeCalled()}))}))}));