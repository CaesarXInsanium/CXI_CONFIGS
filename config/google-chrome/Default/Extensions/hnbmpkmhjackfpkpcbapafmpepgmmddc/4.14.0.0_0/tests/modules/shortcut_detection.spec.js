describe("ShortcutDetection",(()=>{beforeEach((()=>{jest.resetModules();jest.resetAllMocks();console.error=jest.fn();chrome.runtime.sendMessage=jest.fn();navigator.userAgentData={platform:"macOS"}}));describe("constructor",(()=>{it("will identify the user platform, setup the shortcut tests, and get the captured keys",(()=>{require("../../modules/shortcut_detection");expect(hlShortcutDetection._userOs).toBe("mac");expect(hlShortcutDetection._notifyShortcutTests.size).not.toBe(0);expect(hlShortcutDetection._capturedKeys).not.toBeNull()}));it("will set up a `keyup` event listener on the document",(()=>{document.addEventListener=jest.fn();require("../../modules/shortcut_detection");expect(document.addEventListener).toHaveBeenCalledWith("keyup",hlShortcutDetection._keySequenceCapture)}))}));describe("_keySequenceCapture",(()=>{it("will return early if the event key is not within the _capturedKeys property",(()=>{require("../../modules/shortcut_detection");jest.useFakeTimers();jest.spyOn(hlShortcutDetection,"_notifyKeySequenceCaptured");const event={key:"a"};hlShortcutDetection._keySequenceCapture(event);jest.advanceTimersByTime(200);expect(hlShortcutDetection._notifyKeySequenceCaptured).not.toBeCalled()}));it("will add a key to the key buffer",(()=>{require("../../modules/shortcut_detection");const event={key:"Meta"};hlShortcutDetection._keySequenceCapture(event);expect(hlShortcutDetection._keyBuffer).toEqual(["meta"])}));it("will add multiple keys to the key buffer when keydown triggered multiple times within 1 second",(()=>{require("../../modules/shortcut_detection");jest.useFakeTimers();const eventOne={key:"Meta"};const eventTwo={key:"Shift"};hlShortcutDetection._keySequenceCapture(eventOne);jest.advanceTimersByTime(150);hlShortcutDetection._keySequenceCapture(eventTwo);expect(hlShortcutDetection._keyBuffer).toEqual(["meta","shift"])}));it("will replace the buffer with the latest key if the _lastKeyTime is over 1 second",(()=>{require("../../modules/shortcut_detection");jest.useFakeTimers();const eventOne={key:"Meta"};const eventTwo={key:"Shift"};const eventThree={key:"Alt"};hlShortcutDetection._keySequenceCapture(eventOne);jest.advanceTimersByTime(150);hlShortcutDetection._keySequenceCapture(eventTwo);jest.advanceTimersByTime(1100);hlShortcutDetection._keySequenceCapture(eventThree);expect(hlShortcutDetection._keyBuffer).toEqual(["alt"])}));it("will debounce the call of _notifyKeySequenceCaptured by 200ms",(()=>{require("../../modules/shortcut_detection");jest.useFakeTimers();jest.spyOn(hlShortcutDetection,"_notifyKeySequenceCaptured");const eventOne={key:"Meta"};hlShortcutDetection._keySequenceCapture(eventOne);expect(hlShortcutDetection._notifyTimeout).not.toBeNull();expect(hlShortcutDetection._notifyKeySequenceCaptured).not.toBeCalled();jest.advanceTimersByTime(200);expect(hlShortcutDetection._notifyKeySequenceCaptured).toBeCalled()}));it("will clear the notify timeout after an initial key is detected and debounce of _notifyKeySequenceCaptured",(()=>{require("../../modules/shortcut_detection");jest.useFakeTimers();jest.spyOn(hlShortcutDetection,"_notifyKeySequenceCaptured");const eventOne={key:"Meta"};const eventTwo={key:"Shift"};hlShortcutDetection._keySequenceCapture(eventOne);expect(hlShortcutDetection._notifyKeySequenceCaptured).not.toBeCalled();jest.advanceTimersByTime(190);expect(hlShortcutDetection._notifyKeySequenceCaptured).not.toBeCalled();hlShortcutDetection._keySequenceCapture(eventTwo);jest.advanceTimersByTime(20);expect(hlShortcutDetection._notifyKeySequenceCaptured).not.toBeCalled();jest.advanceTimersByTime(180);expect(hlShortcutDetection._notifyKeySequenceCaptured).toBeCalled()}))}));describe("_notifyKeySequenceCaptured",(()=>{it("will return early if the provided sequence is not in the _notifyShortcutTests Set",(()=>{require("../../modules/shortcut_detection");hlShortcutDetection._keyBuffer=["meta","f12"];hlShortcutDetection._notifyKeySequenceCaptured(hlShortcutDetection._keyBuffer);expect(chrome.runtime.sendMessage).not.toBeCalled()}));it("will clear the _keyBuffer if a valid sequence is encountered",(()=>{require("../../modules/shortcut_detection");hlShortcutDetection._keyBuffer=["meta","shift"];hlShortcutDetection._notifyKeySequenceCaptured(hlShortcutDetection._keyBuffer);expect(hlShortcutDetection._keyBuffer).toEqual([])}));it("will send a message to the Chrome runtime when a shortcut has been detected",(()=>{require("../../modules/shortcut_detection");hlShortcutDetection._keyBuffer=["meta","shift"];hlShortcutDetection._notifyKeySequenceCaptured(hlShortcutDetection._keyBuffer);expect(chrome.runtime.sendMessage).toBeCalledWith({message:"detected_shortcut_usage",data:"meta+shift"})}))}));describe("_identifyUserPlatform",(()=>{it("will update _userOs to `mac` when the user is on a Mac PC",(()=>{navigator.userAgentData={platform:"macOS"};require("../../modules/shortcut_detection");hlShortcutDetection._userOs="";hlShortcutDetection._identifyUserPlatform();expect(hlShortcutDetection._userOs).toBe("mac")}));it("will update _userOs to `win` when the user is on a Windows PC",(()=>{navigator.userAgentData={platform:"Windows"};require("../../modules/shortcut_detection");hlShortcutDetection._userOs="";hlShortcutDetection._identifyUserPlatform();expect(hlShortcutDetection._userOs).toBe("win")}));it("will update _userOs to `chrome` when the user is not on Windows or Mac",(()=>{navigator.userAgentData={platform:"Chrome OS"};require("../../modules/shortcut_detection");hlShortcutDetection._userOs="";hlShortcutDetection._identifyUserPlatform();expect(hlShortcutDetection._userOs).toBe("chrome")}))}));describe("_getCapturedKeys",(()=>{it("will return the valid captured keys for Mac users",(()=>{navigator.userAgentData={platform:"macOS"};require("../../modules/shortcut_detection");const mockedCapturedKeys=new Set(["f3","f4","f12","alt","meta","shift","i"]);const capturedKeys=hlShortcutDetection._getCapturedKeys();expect(capturedKeys).toEqual(mockedCapturedKeys)}));it("will return the valid captured keys for Windows users",(()=>{navigator.userAgentData={platform:"Windows"};require("../../modules/shortcut_detection");const mockedCapturedKeys=new Set(["s","f12","alt","meta","control","printscreen","shift","i"]);const capturedKeys=hlShortcutDetection._getCapturedKeys();expect(capturedKeys).toEqual(mockedCapturedKeys)}));it("will return the valid captured keys for ChromeOS Users",(()=>{navigator.userAgentData={platform:"ChromeOS"};require("../../modules/shortcut_detection");const mockedCapturedKeys=new Set(["f5","control","shift","i"]);const capturedKeys=hlShortcutDetection._getCapturedKeys();expect(capturedKeys).toEqual(mockedCapturedKeys)}))}));describe("_setupShortcutTests",(()=>{it("will generate all permutations of expected Mac OS shortcuts",(()=>{navigator.userAgentData={platform:"macOS"};require("../../modules/shortcut_detection");hlShortcutDetection._notifyShortcutTests=new Set;const mockedShortcutPermutations=new Set(["f3","f4","f12","meta+shift","shift+meta","meta+alt","alt+meta","meta+alt+i","meta+i+alt","alt+meta+i","alt+i+meta","i+meta+alt","i+alt+meta"]);hlShortcutDetection._setupShortcutTests();expect(hlShortcutDetection._notifyShortcutTests).toEqual(mockedShortcutPermutations)}));it("will generate all permutations of expected Windows OS shortcuts",(()=>{navigator.userAgentData={platform:"Windows"};require("../../modules/shortcut_detection");hlShortcutDetection._notifyShortcutTests=new Set;const mockedShortcutPermutations=new Set(["f12","printscreen","printscreen+alt","alt+printscreen","printscreen+meta","meta+printscreen","meta+alt","alt+meta","meta+shift","shift+meta","meta+shift+s","meta+s+shift","shift+meta+s","shift+s+meta","s+meta+shift","s+shift+meta","control+shift+i","control+i+shift","shift+control+i","shift+i+control","i+control+shift","i+shift+control"]);hlShortcutDetection._setupShortcutTests();expect(hlShortcutDetection._notifyShortcutTests).toEqual(mockedShortcutPermutations)}));it("will generate all permutations of expected ChromeOS shortcuts",(()=>{navigator.userAgentData={platform:"ChromeOS"};require("../../modules/shortcut_detection");hlShortcutDetection._notifyShortcutTests=new Set;const mockedShortcutPermutations=new Set(["control+f5","f5+control","control+shift","shift+control","control+shift+i","control+i+shift","shift+control+i","shift+i+control","i+control+shift","i+shift+control","control+shift+f5","control+f5+shift","shift+control+f5","shift+f5+control","f5+control+shift","f5+shift+control"]);hlShortcutDetection._setupShortcutTests();expect(hlShortcutDetection._notifyShortcutTests).toEqual(mockedShortcutPermutations)}))}))}));