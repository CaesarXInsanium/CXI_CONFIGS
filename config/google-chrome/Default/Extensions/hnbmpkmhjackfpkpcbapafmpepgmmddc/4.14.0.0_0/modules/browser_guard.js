import*as chromePromise from"./utils/chrome_promise.js";export default class BrowserGuard{_isActive=false;_isBlockNewTabsActive=false;_examWhitelist;_tabWhitelist;_windowWhitelist;_translations;user={isMacUser:false,isWindowsUser:false,isBrowserIdle:false,displayBounds:null,focusedWindowId:null,examTabId:null,cameraTabId:null};fullscreen={isActive:false,start:async tabIds=>{await this._startFullscreen(tabIds)},stop:async()=>{await this._stopFullscreen()}};forceFocus={isActive:false,windowState:null,isSendingFocusLostMessage:true,getCurrentWindowInterval:null,start:(cameraTabId,focusInterval=.5)=>{this._startForceFocus(cameraTabId,focusInterval)},stop:()=>{this._stopForceFocus()}};_chromeMessageListenerHandlers={stop_idle_browser_capture:()=>{this._stopIdleBrowserCapture()},inject_shortcut_detection:async()=>{await this._injectShortcutDetection()}};constructor({whitelist:whitelist,windowWhitelist:windowWhitelist,tabWhitelist:tabWhitelist},{isMacUser:isMacUser,isWindowsUser:isWindowsUser}){this._examWhitelist=whitelist;this._windowWhitelist=windowWhitelist;this._tabWhitelist=tabWhitelist;this.user.isMacUser=isMacUser;this.user.isWindowsUser=isWindowsUser;if(!chromePromise||this._isMissingWhitelistInstance())void 0}start(senderTabId,translations){if(this._isMissingWhitelistInstance()){void 0;return}this._translations=translations;if(this._isActive)return;this._isActive=true;this._setupChromeEventListeners();this._sendMessageBrowserGuardActive(senderTabId)}stop(){this._stopFullscreen();this._isActive=false;this._detachChromeEventListeners();this._sendMessageBrowserGuardDisabled()}enableBlockNewTabs(){if(this._isMissingWhitelistInstance()){void 0;return}if(this._isBlockNewTabsActive)return;this._examWhitelist.enable();this._windowWhitelist.enable();this._tabWhitelist.enable();chrome.tabs.query({},(tabs=>{tabs.forEach((tab=>{if(this._examWhitelist.isAllowed(tab.url)||this._tabWhitelist.isAllowed(tab.id,true))return;chrome.tabs.remove(tab.id)}))}));chrome.tabs.onUpdated.addListener(this._closeTabOnUpdatedHandler);this._isBlockNewTabsActive=true}disableBlockNewTabs(){this._examWhitelist.disable();this._windowWhitelist.disable();this._tabWhitelist.disable();chrome.tabs.onUpdated.removeListener(this._closeTabOnUpdatedHandler);this._isBlockNewTabsActive=false}async _startFullscreen({examTabId:examTabId,windowId:windowId,cameraTabId:cameraTabId}){if(!examTabId||!windowId||!cameraTabId||this._isMissingWhitelistInstance()){void 0;return}if(this.fullscreen.isActive||!this._isActive)return;const fullscreenOverride=await chromePromise.storageLocalGet("fullscreen_override");if(fullscreenOverride?.fullscreen_override)return;const systemDisplays=await chromePromise.systemDisplayGetInfo();const primaryDisplay=systemDisplays.filter((display=>display.isPrimary));this.user.displayBounds=primaryDisplay[0].workArea;this.forceFocus.windowState=this.user.isMacUser?"normal":"maximized";this.user.examTabId=examTabId;this.user.focusedWindowId=windowId;await this._setExamWindowStateFullscreen(windowId);this.forceFocus.start(cameraTabId);this.fullscreen.isActive=true}async _stopFullscreen(){const windows=await chromePromise.windowsGetAll();windows.forEach((window=>{chrome.windows.update(window.id,{state:"normal"})}));this.forceFocus.stop();this.fullscreen.isActive=false}async forceBrowserFocus(windowId,tabId){await chromePromise.windowsUpdate(windowId,{state:this.forceFocus.windowState||"normal",focused:true});chrome.tabs.update(tabId,{active:true})}_startForceFocus(cameraTabId,focusInterval){if(!cameraTabId||this._isMissingWhitelistInstance()){void 0;return}if(this.forceFocus.isActive||!this._isActive)return;this.user.cameraTabId=cameraTabId;chrome.windows.onBoundsChanged?.addListener(this._windowOnBoundsChangedHandler);if(this.user.isMacUser)chrome.windows.onFocusChanged.addListener(this._onFocusedChangedHandler);this.forceFocus.getCurrentWindowInterval=setInterval(this._getCurrentWindowIntervalHandler,1e3*focusInterval);this.forceFocus.isActive=true}_stopForceFocus(){chrome.windows.onBoundsChanged?.removeListener(this._windowOnBoundsChangedHandler);chrome.windows.onFocusChanged.removeListener(this._onFocusedChangedHandler);clearInterval(this.forceFocus.getCurrentWindowInterval);this.forceFocus.isActive=false}_closeTabOnUpdatedHandler=(id,changeInfo,tab)=>{if("loading"!==changeInfo.status||this._examWhitelist.isAllowed(tab.url)||this._tabWhitelist.isAllowed(tab.id,true))return;chrome.tabs.remove(tab.id);this._sendAlertToTabs(this._translations.browserguard.site_not_permitted)};_windowOnBoundsChangedHandler=window=>{if(window.id===this.user.focusedWindowId&&!this._isFocusedWindowFullscreen(window)){this._logFocusLost();this._setExamWindowStateFullscreen(this.user.focusedWindowId)}};_onFocusedChangedHandler=windowId=>{if(this._windowWhitelist.isAllowed(windowId,true))return;this._logFocusLost();this._setExamWindowStateFullscreen(this.user.focusedWindowId)};_getCurrentWindowIntervalHandler=async()=>{const currentWindow=await chromePromise.windowsGetCurrent();const isWindowWhitelisted=this._windowWhitelist.isAllowed(currentWindow.id,true);const isFocusedWindowMinimized=await this._checkIfFocusedWindowIsMinimized(currentWindow,isWindowWhitelisted);if(isFocusedWindowMinimized)return;await this._checkIfRefocusRequired(currentWindow,isWindowWhitelisted)};async _checkIfFocusedWindowIsMinimized(currentWindow,isWindowWhitelisted){if(this.user.isWindowsUser||!isWindowWhitelisted||currentWindow.id===this.user.focusedWindowId||!currentWindow.focused)return false;const window=await chromePromise.windowsGet(this.user.focusedWindowId);const isNotFocusedWindowFullscreen=!this._isFocusedWindowFullscreen(window);if(isNotFocusedWindowFullscreen){this._logFocusLost();await this._setExamWindowStateFullscreen(this.user.focusedWindowId)}return isNotFocusedWindowFullscreen}async _checkIfRefocusRequired(currentWindow,isWindowWhitelisted){if(isWindowWhitelisted&&currentWindow.focused)return;if(!this.user.isMacUser)this._logFocusLost();if(!this.user.isWindowsUser)await this._setExamWindowStateFullscreen(this.user.focusedWindowId)}_logFocusLost(){if(this.user.isBrowserIdle)return;chrome.tabs.sendMessage(this.user.cameraTabId,{action:"window_focus_lost"});chrome.tabs.sendMessage(this.user.examTabId,{action:"start_idle_browser_capture"});this.user.isBrowserIdle=true;if(this.forceFocus.isSendingFocusLostMessage){this.forceFocus.isSendingFocusLostMessage=false;this._sendAlertToTabs(this._translations.browserguard.click_outside,8e3);setTimeout((()=>this.forceFocus.isSendingFocusLostMessage=true),5e3)}}_isFocusedWindowFullscreen(window){const{top:top,left:left,width:width,height:height}=window;return window.state===this.forceFocus.windowState&&top===this.user.displayBounds.top&&left===this.user.displayBounds.left&&width===this.user.displayBounds.width&&height===this.user.displayBounds.height}async _setExamWindowStateFullscreen(windowId){if(this.user.isMacUser){await chromePromise.windowsUpdate(windowId,{top:this.user.displayBounds.top,left:this.user.displayBounds.left,width:this.user.displayBounds.width,height:this.user.displayBounds.height,focused:true,state:this.forceFocus.windowState});chrome.tabs.update(this.user.examTabId,{active:true});return}if(!this.user.isWindowsUser)await chromePromise.windowsUpdate(windowId,{focused:false,state:"minimized"});await chromePromise.windowsUpdate(windowId,{focused:true,state:this.forceFocus.windowState});chrome.tabs.update(this.user.examTabId,{active:true})}async _sendMessageBrowserGuardActive(senderTabId){this._updateLocalGuardModeStatus();const queriedTabs=await chromePromise.tabsQuery({});queriedTabs.forEach((tab=>{if(this._examWhitelist.isDefault(tab.url))return;chrome.tabs.sendMessage(tab.id,{action:"init_browser_guard"})}));if(senderTabId)chrome.tabs.sendMessage(senderTabId,{action:"browser_guard_enabled"})}async _sendMessageBrowserGuardDisabled(){this._updateLocalGuardModeStatus();const queriedTabs=await chromePromise.tabsQuery({});queriedTabs.forEach((tab=>{chrome.tabs.sendMessage(tab.id,{action:"halt_browser_guard"})}))}async _sendAlertToTabs(message,timeout=3e3){await chromePromise.tabsUpdate(this.user.examTabId,{active:true});chrome.tabs.sendMessage(this.user.examTabId,{type:"alert",alerts:[{type:"exam",message:message,url:null,style:"",timeout:timeout}]})}_updateLocalGuardModeStatus(){chrome.storage.local.set({guardModeStatus:this._isActive?1:0})}_isMissingWhitelistInstance(){return!this._examWhitelist||!this._windowWhitelist||!this._tabWhitelist}async _injectShortcutDetection(){if(!this._isActive)return;const localStorageData=await chromePromise.storageLocalGet(["launch_meta","shortcut_detection_enabled"]);const isShortcutDetectionEnabled=localStorageData.launch_meta?localStorageData.launch_meta.shortcut_detection_enabled:localStorageData.shortcut_detection_enabled;if(!isShortcutDetectionEnabled)return;chrome.tabs.executeScript(this.user.examTabId,{allFrames:true,file:"modules/shortcut_detection.js"})}_stopIdleBrowserCapture(){if(!this.user.isBrowserIdle)return;this.user.isBrowserIdle=false;chrome.tabs.sendMessage(this.user.cameraTabId,{action:"window_focus_returned",data:this.user.isWindowsUser})}_setupChromeEventListeners(){chrome.runtime.onMessage.addListener(this._onChromeMessageHandler)}_detachChromeEventListeners(){chrome.runtime.onMessage.removeListener(this._onChromeMessageHandler)}_onChromeMessageHandler=request=>{if("browser_guard"!==request.type||!this._chromeMessageListenerHandlers[request.message])return;this._chromeMessageListenerHandlers[request.message]()}}