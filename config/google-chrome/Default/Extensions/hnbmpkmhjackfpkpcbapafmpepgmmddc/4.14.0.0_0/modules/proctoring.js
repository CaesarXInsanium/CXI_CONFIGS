chrome.extension.onMessage.addListener((msg=>{if("proctoring"!==msg.type)return;switch(msg.action){case"proctoring_init":hlProctor.init(msg.data);break;case"proctoring_end":hlProctor.end();break}}));class Proctoring{constructor(){this._student=null;this._appUrl=null;this._examInstructions="";this._examInstructionsTitle="";this._examInstructionsHeading="";this._livelookProctorMessages={};this._isProctorChatting=false;this._honorlockProctorContainerElement=null;this._locale="en"}init(data){this.focusChat();if(!!this._honorlockProctorContainerElement){this._honorlockProctorContainerElement.style.display="flex";this._injectJS(`LiveChatWidget.call('hide')`);this.proctorJoining();return}this._student=data.student;this._appUrl=data.app_url;this._locale=globalThis.localeMap.init(data.locale);this._livelookProctorMessages=data.exam.livelook_proctor_messages;this._examInstructions=data.exam.instructions;this._examInstructionsTitle=data.exam.instructions_title;this._examInstructionsHeading=data.exam.instructions_heading;this.openDialog();chrome.runtime.sendMessage({message:"livelook_begin_flag",data:{student_id:this._student.id,type:"livelook_begin",paused_exam:1}})}startOlark(){let email="undefined"!==typeof lms_student_email&&!!lms_student_email?lms_student_email:this._student.email;if(!document.getElementById("hl-olark-init-script")){let injectJs=`\n                function injectOlark(callback) {\n                    if (window.olark) {\n                        return;\n                    }\n                                \n                    const scriptUri = 'static.olark.com/jsclient/loader.js';\n                    const olarkScript = document.createElement('script');\n                    const firstScript = document.getElementsByTagName('script')[0];\n                \n                    olarkScript.async = true;\n                    olarkScript.addEventListener('load', triggerCallback);\n                    olarkScript.src = '//' + scriptUri;\n                    firstScript.parentNode.insertBefore(olarkScript, firstScript);\n                \n                    const olarkObject = window.olark = function () {\n                        config.s.push(arguments);\n                        config.t.push(+new Date());\n                    };\n                    olarkObject.extend = function (i, j) {\n                        olarkObject("extend", i, j);\n                    };\n                    olarkObject.identify = function (i) {\n                        olarkObject("identify", (config.i = i));\n                    };\n                    olarkObject.configure = function (i, j) {\n                        olarkObject("configure", i, j);\n                        config.c[i] = j;\n                    };\n                \n                    const config = olarkObject._ = { s: [], t: [+new Date()], c: {}, l: scriptUri };\n                    \n                    function triggerCallback() {\n                        olarkScript.removeEventListener('load', triggerCallback);\n                        callback();\n                    }\n                }\n                \n                injectOlark(function () {\n                    let isOlarkInitialized = false;\n                    const studentId = '${this._student.id}';\n                    const studentName = '${this._student.name}';\n                    const studentEmail = '${email}'; \n                \n                    olark.configure('box.inline', true);\n                    olark.configure('system.hb_hide_minimize_button', true);\n                    olark.configure('system.is_single_page_application', true );\n                    olark.configure('system.localization', '${this._locale._code}');\n            `;if(this._livelookProctorMessages.olark)Object.keys(this._livelookProctorMessages.olark).forEach((key=>{injectJs+=`\n                        olark.configure('locale.${key}', "${this._livelookProctorMessages.olark[key]}");\n                    `}));injectJs+=`\n                olark.identify('${olark_license}');\n                \n                olark('api.visitor.updateCustomFields', { studentId: studentId });\n                olark('api.visitor.updatePhoneNumber', { phoneNumber: studentId });\n                if (!! studentEmail) {\n                    olark('api.visitor.updateEmailAddress', { emailAddress: studentEmail });\n                }\n                if (!! studentName) {\n                    olark('api.visitor.updateFullName', { fullName: studentName });\n                }\n            \n                olark('api.chat.onReady', () => {                                       \n                    if (!isOlarkInitialized) { \n                        let ready = new CustomEvent('proctorChatReady', {});\n                        document.dispatchEvent(ready);\n                        isOlarkInitialized = true;\n                    }       \n                });\n                olark('api.chat.updateVisitorStatus', {\n                    snippet: 'Student Language: ' + '${this._locale._name}'\n                });\n                olark('api.chat.onMessageToVisitor', ({message}) => {            \n                    if (message.automated) return;\n            \n                    let focusChat = new CustomEvent('focusChat', {});\n                    document.dispatchEvent(focusChat);\n            \n                    if (message.body.startsWith('#')) {\n                        let command = message.body.replace('#','');\n                        let event = new CustomEvent(command, {});\n                        document.dispatchEvent(event);\n                    }\n                });\n                olark('api.chat.onCommandFromOperator', ({command}) => {\n                    let event = new CustomEvent(command.name, {});\n                    document.dispatchEvent(event);\n                });\n            });\n            `;this._injectJS(injectJs,"hl-olark-init-script")}}openDialog(){this._injectJS(`LiveChatWidget.call('hide')`);if(!!this._honorlockProctorContainerElement){this._honorlockProctorContainerElement.style.display="flex";this.proctorJoining();return}const hlLogo=chrome.extension.getURL("/icon.png");const spinner=chrome.extension.getURL("/assets/icons/spinner.svg");const prStylesheet=chrome.extension.getURL("/assets/proctoring.css");this._honorlockProctorContainerElement=document.createElement("div");this._honorlockProctorContainerElement.id="honorlock-proctor-container";this._honorlockProctorContainerElement.classList.add("hl-proctor-container");this._honorlockProctorContainerElement.innerHTML=`\n            <link rel="stylesheet" href="${prStylesheet}">\n            <div id="hl-proctor-content" class="hl-proctor-content">\n                <div id="proctor-guidelines" class="hl-proctor-content__guidelines">\n                    <div class="hl-proctor-content__logo">\n                        <img class="hl-proctor-content__logo-image" src="${hlLogo}" alt="">\n                        <span class="hl-proctor-content__logo-text">\n                            Honorlock\n                        </span>\n                    </div>\n                    <h2 class="hl-proctor-content__guidelines-heading">\n                        ${this._examInstructionsHeading}\n                    </h2>\n                    <div class="hl-proctor-content__guidelines-title">\n                        ${this._examInstructionsTitle}\n                    </div>\n                    <div class="hl-proctor-content__guidelines-body">\n                        ${this._examInstructions}\n                    </div>\n                </div>\n                <div class="hl-proctor-content__chat">\n                    <div id="olark-box-container" class="hl-proctor-content__olark">\n                        <img id="hl-proctor-spinner" class="hl-proctor-content__spinner" src="${spinner}" alt="">\n                    </div>\n                </div>\n            </div>\n        `;document.body.appendChild(this._honorlockProctorContainerElement);this.startOlark()}end(){if(!this._honorlockProctorContainerElement)return;this._honorlockProctorContainerElement.style.display="none";document.body.style.overflowY="";this._isProctorChatting=false;chrome.runtime.sendMessage({message:"livelook_complete_flag",data:{student_id:this._student.id,type:"livelook_complete",paused_exam:0}});this._injectJS(`\n            LiveChatWidget.call('minimize');\n        `)}isChatting(){return this._isProctorChatting}proctorJoining(){this._injectJS(`\n            olark('api.chat.sendNotificationToVisitor', {\n                body: '${this._livelookProctorMessages.joining}'\n            });\n            olark('api.chat.sendMessageToVisitor', {\n                body: "${this._livelookProctorMessages.reviewing}"\n            });\n            olark('api.chat.sendNotificationToOperator', {\n                body: '${this._livelookProctorMessages.student_session_label}: ${this._appUrl}/student/view/${this._student.id}'\n            });\n            olark('api.chat.sendNotificationToOperator', {\n                body: 'Student Language: ${this._locale._name}'\n            });\n        `);document.body.style.overflowY="hidden";this._isProctorChatting=true}focusChat(){chrome.runtime.sendMessage({message:"focus_page"});return this}_injectJS(code,id=null){let script=document.createElement("script");script.type="text/javascript";script.innerHTML=code;if(id)script.id=id;document.body.appendChild(script)}}let hlProctor=new Proctoring;document.addEventListener("proctorChatReady",(()=>{if(hlProctor.isChatting())return;hlProctor.proctorJoining()}));document.addEventListener("focusChat",(()=>hlProctor.focusChat()));chrome.runtime.sendMessage({type:"proctoring",message:"proctoring_check"},(response=>{if(response)chrome.runtime.sendMessage({type:"proctoring",message:"proctoring_init"})}));